SWIFT NOTES

* Syntax

	- Printing

		println("Hello world")

	- Variables and constants

		var myVar = 42 //Variable is created
		myVar = 50 //Variable is changed

		let myConstant = 42 //Constant is created

		let explicitDouble: Double = 70 //Explicit data type

	- Explicitly converting variable types

		let label = "Width is: "
		let width = 94
		let widthLabel = label + String(width)
			OR widthLabel = label + \(width)

	- Arrays and dictionaries:

		//Array
		var shoppingList = ["Tuna", "Ham", "Cheese"]

		//Dictionary
		var occupations = [
			"Malcolm" : "Captain"
			"Kaylee" : "Mechanic"
		]

		occupations["Jayne"] = "HR" //Occupation added

		//To create empty array or dictionary
		let emptyArray = String[]()
		let emptyDictionary = Dictionary<String, Float>()

sdf	- Control flow:

		//For loop

		let scores = [1, 2, 3, 5]
		var teamScore = 0
		for score in scores{
			if score > 50{
				teamScore ++;
			}
		}

		//Switches

		let number = 1

		switch number{
			case 1: code
			case 2: code
			case 3: code
			default: code
		}

		//Iterating through dictionary

		let numbers = [
			"Prime" : [2,3,5,7,11,13]
			"Fibonacci" : [1,1,2,4,5,8]
		]

		for (kind, numbers) in interstingNumbers{
			for number in numbers{
				//Some code
			}
		}

		//While loop

		var n = 2
		while n < 100{
			n = n*2
		}
		
		//For loop iteration

		for i in 0..100{
			if(i%5) println("Fizz")
		}

	- Functions and Closures

		//Syntax
		func greet(name: String, day:String){
			return "Hello \(name), today is \(day)"
		}

		//You can also return multiple values from a function using tuples
		func getGasPrices() -> (Double, Double, Double){
			return (3.59, 3.61, 3.72)
		}

		//Take a variable number of arguments

		func sumOf(numbers: Int...) -> Int{
			var sum = 0
			for number in numbers{
				sum += number
			}
			return sum
		}
		sumOf() //Should work
		sumOf(42, 597, 12) //Should work

	- Objects and Classes Basics

		//Class definition

		class Shape {
			
			//Parameters
			var numberOfSides: Int = 0
			var name: String

			init(name: Strint){ //Constructor
				self.name = name
			}

			deinit(){ //Function deinitializer if we need to do some cleanup

			}
			
			//Functions
			func simpleDescription() -> String{
				return "A shape with \(numberOfSides) sides."
			}

		}

		//To instantiate a class

		var shape = Shape("MyShape");
		shape.numberOfSides = 5;

	- Class inheritance and polymorph

		//Class inheritance

		class Square: Shape{

			var sideLength: Double

			init(sideLength:Double, name: String){
				self.sideLength = sideLength
				super.init(name: name) //Uses the parent initializer
			}

			//You can also override functions if you wish

			override func simpleDescription() -> String{
				return "Fuck you parent function"
			}
		}

	- Enumerations and structures

		enum Rank: Int{
			case Ace = 1;
			case Two = 2;
			...
			case Jack = 11;
			case Queen = 12;
			case King = 13;
		}

		